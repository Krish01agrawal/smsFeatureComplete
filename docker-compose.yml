version: '3.8'

services:
  # MongoDB Database
  mongodb:
    image: mongo:7.0
    container_name: sms-mongodb
    restart: unless-stopped
    environment:
      MONGO_INITDB_ROOT_USERNAME: ${MONGO_ROOT_USERNAME:-admin}
      MONGO_INITDB_ROOT_PASSWORD: ${MONGO_ROOT_PASSWORD:-password}
      MONGO_INITDB_DATABASE: ${MONGODB_DB:-pluto_money}
    ports:
      - "27017:27017"
    volumes:
      - mongodb_data:/data/db
      - ./mongodb-init:/docker-entrypoint-initdb.d
    networks:
      - sms-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3

  # SMS Processing Service
  sms-processing:
    build:
      context: ./extract-sms-email-data
      dockerfile: Dockerfile
    container_name: sms-processing-service
    restart: unless-stopped
    environment:
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${MONGODB_DB:-pluto_money}?authSource=admin
      MONGODB_DB: ${MONGODB_DB:-pluto_money}
      API_HOST: 0.0.0.0
      API_PORT: 8000
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
      API_URL: ${API_URL:-}
      API_KEY: ${API_KEY:-}
    ports:
      - "8000:8000"
    depends_on:
      mongodb:
        condition: service_healthy
    networks:
      - sms-network
    volumes:
      - ./extract-sms-email-data/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Analytics Dashboard Service
  analytics-dashboard:
    build:
      context: ./sms
      dockerfile: Dockerfile
    container_name: sms-analytics-dashboard
    restart: unless-stopped
    environment:
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${MONGODB_DB:-pluto_money}?authSource=admin
      MONGODB_DB: ${MONGODB_DB:-pluto_money}
      GROQ_API_KEY: ${GROQ_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      INHOUSE_API_KEY: ${INHOUSE_API_KEY:-}
      INHOUSE_API_URL: ${INHOUSE_API_URL:-}
      DEBUG: ${DEBUG:-False}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8501:8501"
    depends_on:
      mongodb:
        condition: service_healthy
      sms-processing:
        condition: service_healthy
    networks:
      - sms-network
    volumes:
      - ./sms/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Financial Chat API Service
  chat-api:
    build:
      context: ./sms
      dockerfile: Dockerfile.chat
    container_name: sms-chat-api
    restart: unless-stopped
    environment:
      MONGODB_URI: mongodb://${MONGO_ROOT_USERNAME:-admin}:${MONGO_ROOT_PASSWORD:-password}@mongodb:27017/${MONGODB_DB:-pluto_money}?authSource=admin
      MONGODB_DB: ${MONGODB_DB:-pluto_money}
      GROQ_API_KEY: ${GROQ_API_KEY}
      GEMINI_API_KEY: ${GEMINI_API_KEY}
      INHOUSE_API_KEY: ${INHOUSE_API_KEY:-}
      INHOUSE_API_URL: ${INHOUSE_API_URL:-}
      DEBUG: ${DEBUG:-False}
      LOG_LEVEL: ${LOG_LEVEL:-INFO}
    ports:
      - "8001:8001"
    depends_on:
      mongodb:
        condition: service_healthy
      sms-processing:
        condition: service_healthy
    networks:
      - sms-network
    volumes:
      - ./sms/logs:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: sms-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - sms-processing
      - analytics-dashboard
      - chat-api
    networks:
      - sms-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache (Optional)
  redis:
    image: redis:7-alpine
    container_name: sms-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - sms-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  mongodb_data:
    driver: local
  redis_data:
    driver: local

networks:
  sms-network:
    driver: bridge
